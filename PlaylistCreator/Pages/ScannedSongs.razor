@page "/scannedsongs"
@using global::Shared
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using System.Linq
@using PlaylistCreator.Models
@inject IDbContextFactory<UltrastarContext> _dbFactory
<PageTitle>Songs</PageTitle>

<h1>Songs</h1>

<input type="text" class="form-control" @oninput="e => SongsWithScores.Filter = e.Value.ToString()" placeholder="Filter">

<table class="table table-sortable mt-3">
  <thead>
  <tr>
    @foreach (var x in Enum.GetValues(typeof(SongsWithScoresModel.SortingType)).Cast<SongsWithScoresModel.SortingType>())
    {
      <th scope="col"><i class="oi @(SongsWithScores.OrderedBy == x && SongsWithScores.Ascending ? "oi-sort-descending" : "oi-sort-ascending")" @onclick="() => ChangeOrder(x)"></i> @x.ToString()</th>
    }
    <th/>
  </tr>
  </thead>
  <tbody>
  <Virtualize Items="@SongsWithScores.SongsWithScoresOrderedAndFiltered" >
  <tr>
        <th scope="row"> @context.Song.Id </th>
        <td> @context.Song.Artist </td>
        <td> @context.Song.Title </td>
        <td> @context.Score?.Score </td>
        <td> @context.Score?.Player </td>
        <td> @context.Score?.Date.ToLocalTime() </td>
        <td>
          <div class="dropdown">
            @{
              var playlists = Playlists.Where(p => p.Songs.All(s => s.Id != context.Song.Id)).ToList();

              <button class="btn btn-outline-success dropdown-toggle" disabled="@(!playlists.Any())" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                Add to
              </button>
              <ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
                @foreach (var playlist in playlists)
                {
                  <li><a class="dropdown-item" @onclick="() => AddToPlaylist(playlist.Id, context.Song)">@playlist.Name</a></li>
                }
              </ul>
            }
          </div>
        </td>
      </tr>
  </Virtualize>
  </tbody>
</table>

@code {

  SongsWithScoresModel SongsWithScores { set; get; } = new SongsWithScoresModel(new List<UsToolsSong>(), new List<UsScore>());

  List<UsToolsPlaylist> Playlists { get; set; } = new();

  protected override void OnInitialized()
  {
    Task.Run(async () =>
    {
      await using var context = await _dbFactory.CreateDbContextAsync();

      var scores = context.UsScores.Include(s => s.Song).GroupBy(s => s.SongId).Select(scores => scores.OrderByDescending(s => s.Score).FirstOrDefault()).ToList();
      var songs = context.UsToolsSongs.ToList();

      SongsWithScores = new SongsWithScoresModel(songs, scores!);
      Playlists = context.UsToolsPlaylists.Include(p => p.Songs).ToList();

      await InvokeAsync(StateHasChanged);
    });
  }

  void ChangeOrder(SongsWithScoresModel.SortingType newType)
  {
    if (newType == SongsWithScores.OrderedBy)
      SongsWithScores.Ascending = !SongsWithScores.Ascending;
    else
      SongsWithScores.OrderedBy = newType;
  }

  async void AddToPlaylist(long playlistId, UsToolsSong song)
  {
    await using var context = await _dbFactory.CreateDbContextAsync();
    
    var playlist = context.UsToolsPlaylists.Include(p => p.Songs).FirstOrDefault(p => p.Id == playlistId);
    var dbSong = context.UsToolsSongs.FirstOrDefault(s => s.Id == song.Id);

    if (playlist is null || dbSong is null || playlist.Songs.Any(s => s.Id == song.Id))
      return;
    
    playlist.Songs.Add(dbSong);
    await context.SaveChangesAsync();
  }
}
