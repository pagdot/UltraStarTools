@page "/playlists"
@using global::Shared
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@using System.Text
@using PlaylistCreator.Models
@inject IDbContextFactory<UltrastarContext> _dbFactory
@inject IJSRuntime JS
<PageTitle>Playlists</PageTitle>

<h1>Playlists</h1>

<div class="btn-toolbar" role="toolbar">
  <div class="input-group me-3 mb-3" role="toolbar">
    <select @bind="SelectedPlaylistId" class="form-select">
      <option selected hidden value="">Select playlist</option>
      <option value="-1">All songs</option>
      @{
        foreach (var pl in PlaylistList)
        {
          <option value="@pl.Id">@pl.Name</option>
        }
      }
    </select>
    <button class="btn btn-outline-warning" type="button" disabled="@(SelectedPlaylistId is null or < 0 || !PlaylistList.Any())" @onclick="DownloadPlaylist">Download</button>
    <button class="btn btn-outline-danger me-3" type="button" disabled="@(SelectedPlaylistId is null or < 0 || !PlaylistList.Any())" @onclick="RemovePlaylist">Remove</button>
  </div>

  <div class="input-group mb-3" role="toolbar">
    <input type="text" class="form-control" placeholder="Playlist name" aria-label="Playlist name" @bind="NewName" aria-describedby="basic-addon2">
    <button class="btn btn-outline-success" type="button" id="button-addon2" @onclick="AddPlaylist">Add</button>
  </div>
</div>

<table class="table table-sortable mt-3 align-middle table-striped">
  <thead>
  <tr>
    <th bg-white sticky-top border-bottom border-dark><input class="form-check-input" type="checkbox" @bind="AllSelected"></th>
    @foreach (var x in Enum.GetValues(typeof(SongsWithScoresModel.SortingType)).Cast<SongsWithScoresModel.SortingType>())
    {
      <th class="bg-white sticky-top border-bottom border-dark" nowrap="nowrap"><a href="" @onclick="() => ChangeOrder(x)" @onclick:preventDefault class="text-reset text-decoration-none"><i class="oi @(SongsWithScores.OrderedBy == x && SongsWithScores.Ascending ? "oi-caret-top" : "oi-caret-bottom")"></i> @x.ToString()</a></th>
    }
    <th class="bg-white sticky-top border-bottom border-dark" nowrap="nowrap">
      <div class="btn-group d-flex flex-nowrap row-cols-2">
        <div class="btn-group">
          <button class="btn btn-outline-success dropdown-toggle col-1" disabled="@(!PlaylistList.Any() || !SelectedSongs.Any())" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="d-none d-lg-inline align-middle">Add selected to</span>
            <span class="d-lg-none oi oi-plus align-middle"></span>
          </button>
          <ul class="dropdown-menu">
            @foreach (var playlist in PlaylistList.Where(p => p.Id != SelectedPlaylistId))
            {
              <li><a class="dropdown-item" @onclick="() => AddAllSelected(playlist.Id)">@playlist.Name</a></li>
            }
          </ul>
        </div>
        <button type="button" class="btn btn-outline-danger col-1" disabled="@(SelectedPlaylistId < 0 || !SelectedSongs.Any())" @onclick="RemoveAllSelected">
          <span class="d-none d-lg-inline col align-middle">Remove selected</span>
          <span class="d-lg-none oi oi-minus col align-middle"></span>
        </button>
      </div>
      </th>
  </tr>
  </thead>
  <tbody>
  @{
    var playlists = PlaylistList;
    
    <Virtualize Items="@SongsWithScores.SongsWithScoresOrderedAndFiltered" >
      <tr>
        @{
          <th bg-white sticky-top border-bottom border-dark><input class="form-check-input" type="checkbox" checked="@SelectedSongs.Contains(context.Song.Id)" @onchange="(args) => {if (args.Value is bool ? (bool) args.Value : false) SelectedSongs.Add(context.Song.Id); else SelectedSongs.Remove(context.Song.Id);}" ></th>
        }
        <td class="col-1"> @context.Song.Id </td>
        <td class="col-2"> @context.Song.Artist </td>
        <td class="col-3"> @context.Song.Title </td>
        <td class="col-1"> @context.Score?.Score </td>
        <td class="col-2"> @context.Score?.Player </td>
        <td class="col-2"> @context.Score?.Date.ToLocalTime() </td>
        <td>
          <div class="btn-group d-flex flex-nowrap row-cols-2">
            @{
              var availablePlaylists = playlists.Where(p => p.Songs.All(s => s.Id != context.Song.Id)).ToList();
                
              <div class="btn-group">
                <button class="btn btn-outline-success dropdown-toggle col-1" disabled="@(!availablePlaylists.Any())" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <span class="d-none d-lg-inline align-middle">Add to</span>
                  <span class="d-lg-none oi oi-plus align-middle"></span>
                </button>
                <ul class="dropdown-menu">
                  @foreach (var playlist in availablePlaylists)
                  {
                    <li><a class="dropdown-item" @onclick="() => AddToPlaylist(playlist.Id, context.Song)">@playlist.Name</a></li>
                  }
                </ul>
              </div>
            }
            <button type="button" class="btn btn-outline-danger col-1" disabled="@(SelectedPlaylistId < 0)" @onclick="() => RemoveFromPlaylist(context.Song.Id)">
              <span class="d-none d-lg-inline col align-middle">Remove</span>
              <span class="d-lg-none oi oi-minus col align-middle"></span>
            </button>
          </div>
        </td>
      </tr>
    </Virtualize>
  }
  </tbody>
</table>

@code {
  List<UsScore> Scores { get; set; } = new();
  List<UsToolsSong> Songs { get; set; } = new();

  SongsWithScoresModel SongsWithScores { set; get; } = new(new List<UsToolsSong>(), new List<UsScore>());

  HashSet<long> SelectedSongs { get; } = new();
  bool _allSelected = false;

  string NewName { get; set; } = string.Empty;

  long? _selectedPlaylistId;

  long? SelectedPlaylistId
  {
    get => _selectedPlaylistId;
    set
    {
      _selectedPlaylistId = value;
      SelectedSongs.Clear();
      UpdateSongsWithScores(value);
    }
  }

  bool AllSelected
  {
    get => _allSelected;
    set
    {
      _allSelected = value;
      
      SelectedSongs.Clear();

      if (!value) return;
      
      foreach (var songWithScoreModel in SongsWithScores.SongsWithScoresOrderedAndFiltered)
      {
        SelectedSongs.Add(songWithScoreModel.Song.Id);
      }
    }
  }

  List<UsToolsPlaylist> PlaylistList
  {
    get
    {
      using var context = _dbFactory.CreateDbContext();
      return context.UsToolsPlaylists.Include(p => p.Songs).ToList(); //.Include(p => p.Songs).ToList();
    }
  }

  protected override void OnInitialized()
  {
    Task.Run(async () =>
    {
      await using var context = await _dbFactory.CreateDbContextAsync();

      Scores = context.UsScores.Include(s => s.Song).GroupBy(s => s.SongId).Select(scores => scores.OrderByDescending(s => s.Score).FirstOrDefault()).ToList()!;
      Songs = context.UsToolsSongs.ToList();
      
      await InvokeAsync(StateHasChanged);
    });
  }

  void UpdateSongsWithScores(long? playlistId)
  {
    SongsWithScores = new SongsWithScoresModel(playlistId is null ? new List<UsToolsSong>() : playlistId < 0 ? Songs : PlaylistList.FirstOrDefault(p => p.Id == playlistId)!.Songs, Scores);
    StateHasChanged();
  }

  async void AddToPlaylist(long playlistId, UsToolsSong song)
  {
    await using var context = await _dbFactory.CreateDbContextAsync();
    
    var playlist = context.UsToolsPlaylists.Include(p => p.Songs).FirstOrDefault(p => p.Id == playlistId);
    var dbSong = context.UsToolsSongs.FirstOrDefault(s => s.Id == song.Id);

    if (dbSong is null)
      return;
    
    playlist?.Songs.Add(dbSong);
    await context.SaveChangesAsync();
  }

  async void AddPlaylist()
  {
    await using var context = await _dbFactory.CreateDbContextAsync();
    context.UsToolsPlaylists.Add(new UsToolsPlaylist() {Name = NewName});
    await context.SaveChangesAsync();
    
    NewName = string.Empty;
  }

  void ChangeOrder(SongsWithScoresModel.SortingType newType)
  {
    if (newType == SongsWithScores.OrderedBy)
      SongsWithScores.Ascending = !SongsWithScores.Ascending;
    else
      SongsWithScores.OrderedBy = newType;
  }

  private async void RemoveFromPlaylist(long songId)
  {
    if (SelectedPlaylistId is null or < 0)
      return;
    
    await using var context = await _dbFactory.CreateDbContextAsync();
    
    var playlist = context.UsToolsPlaylists.Include(s => s.Songs).FirstOrDefault(p => p.Id == SelectedPlaylistId);
    var song = context.UsToolsSongs.FirstOrDefault(s => s.Id == songId);
    
    if (song is null)
      return;
    
    playlist?.Songs.Remove(song);
    await context.SaveChangesAsync();

    UpdateSongsWithScores(SelectedPlaylistId);
  }

  private async void RemovePlaylist()
  {
    SongsWithScores = new SongsWithScoresModel(new List<UsToolsSong>(), new List<UsScore>());

    await using var context = await _dbFactory.CreateDbContextAsync();

    var playlist = PlaylistList.FirstOrDefault(p => p.Id == SelectedPlaylistId);
    
    if (playlist is null)
      return;
    
    context.UsToolsPlaylists.Remove(playlist);
    await context.SaveChangesAsync();
  }

  private async Task DownloadPlaylist()
  {
    var playlist = PlaylistList.FirstOrDefault(p => p.Id == SelectedPlaylistId);
    
    if (playlist is null)
      return;

    var dataBuilder = new StringBuilder();
    dataBuilder.AppendLine($"#Name: {playlist.Name}");
    dataBuilder.AppendLine($"#Songs:");
    foreach (var song in playlist.Songs)
    {
      dataBuilder.AppendLine($"{song.Artist} : {song.Title}");
    }
    
    var fileStream = new MemoryStream(Encoding.UTF8.GetBytes(dataBuilder.ToString()));

    var fileName = $"{playlist.Name}.upl";

    using var streamRef = new DotNetStreamReference(stream: fileStream);

    await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
  }


  private async Task AddAllSelected(long playlistId)
  {
    await using var context = await _dbFactory.CreateDbContextAsync();
    var playlist = context.UsToolsPlaylists.Include(p => p.Songs).FirstOrDefault(p => p.Id == playlistId);
    
    foreach (var dbSong in SelectedSongs.Select(id => context.UsToolsSongs.FirstOrDefault(s => s.Id == id)))
    {
      if (dbSong is null || playlist is null || playlist.Songs.Contains(dbSong))
        continue;;
    
      playlist.Songs.Add(dbSong);
    }
    
    await context.SaveChangesAsync();
  }

  private async Task RemoveAllSelected()
  {
    if (SelectedPlaylistId is null or < 0)
      return;
    
    await using var context = await _dbFactory.CreateDbContextAsync();
    
    var playlist = context.UsToolsPlaylists.Include(s => s.Songs).FirstOrDefault(p => p.Id == SelectedPlaylistId);

    foreach (var dbSong in SelectedSongs.Select(id => context.UsToolsSongs.FirstOrDefault(s => s.Id == id)))
    {
      if (dbSong is null || playlist is null || !playlist.Songs.Contains(dbSong))
        continue;;
    
      playlist.Songs.Remove(dbSong);
    }
    
    await context.SaveChangesAsync();

    UpdateSongsWithScores(SelectedPlaylistId);
  }
}
