@page "/playlists"
@using global::Shared
@using System.Text
@using UsDbDownloader.Data
@using Helper
@inject Repository Repository
@inject IJSRuntime JS
@inject List<CompleteSong> AllSongs
<PageTitle>Playlists</PageTitle>

<h1>Playlists</h1>

<div class="btn-toolbar" role="toolbar">
  <div class="input-group me-3 mb-3" role="toolbar">
    <select @bind="SelectedPlaylistId" class="form-select">
      <option selected hidden value="">Select playlist</option>
      <option value="-1">All songs</option>
      @{
        foreach (var pl in Playlists)
        {
          <option value="@pl.Id">@pl.Name</option>
        }
      }
    </select>
    <button class="btn btn-outline-warning" type="button" disabled="@(SelectedPlaylist is null || !Playlists.Any())" @onclick="DownloadPlaylist">Download</button>
    <button class="btn btn-outline-danger me-3" type="button" disabled="@(SelectedPlaylist is null  || !Playlists.Any())" @onclick="RemovePlaylist">Remove</button>
  </div>

  <div class="input-group mb-3" role="toolbar">
    <input type="text" class="form-control" placeholder="Playlist name" aria-label="Playlist name" @bind="NewName" aria-describedby="basic-addon2">
    <button class="btn btn-outline-success" type="button" id="button-addon2" @onclick="AddPlaylist">Add</button>
  </div>
</div>

<DataGrid Items="Songs">
  
  <TemplateColumn>
    <HeaderTemplate>
      <input class="form-check-input" type="checkbox" @bind="AllSelected"/>
    </HeaderTemplate>
    <BodyTemplate>
      <input class="form-check-input" type="checkbox" checked="@SelectedSongs.Contains(context)" @onchange="(args) => {if (args.Value is bool ? (bool) args.Value : false) SelectedSongs.Add(context); else SelectedSongs.Remove(context);}">
    </BodyTemplate>
  </TemplateColumn>
  
  <DataColumn Title="Artist" Field="@(x => x.Artist)" IsSortable="true" IsDefaultSort="true" IsFilterable="true" Width="33%"/>
  <DataColumn Title="Title" Field="@(x => x.Title)" IsSortable="true" IsFilterable="true" Width="33%"/>
  <DataColumn Title="Score" Field="@(x => x.HighScore)" IsSortable="true" IsFilterable="true" Width="33%"/>
  <DataColumn Title="Player" Field="@(x => x.HighScoreHolder)" IsSortable="true" IsFilterable="true" Width="33%"/>
  <DataColumn Title="Date" Field="@(x => x.HighScoreDate)" IsSortable="true" IsFilterable="true" Width="33%"/>

    <TemplateColumn>
      <HeaderTemplate>
        <div class="btn-group d-flex flex-nowrap row-cols-2">
          <div class="btn-group">
            <button class="btn btn-outline-success dropdown-toggle col-1" disabled="@(!Playlists.Any() || !SelectedSongs.Any())" type="button" data-bs-toggle="dropdown" aria-expanded="false">
              <span class="d-none d-lg-inline align-middle">Add selected to</span>
              <span class="d-lg-none oi oi-plus align-middle"></span>
            </button>
            <ul class="dropdown-menu">
              @foreach (var playlist in Playlists.Where(p => p != SelectedPlaylist))
              {
                <li><a class="dropdown-item" @onclick="() => AddAllSelected(playlist)">@playlist.Name</a></li>
              }
            </ul>
          </div>
          <button type="button" class="btn btn-outline-danger col-1" disabled="@(SelectedPlaylist is null || !SelectedSongs.Any())" @onclick="RemoveAllSelected">
            <span class="d-none d-lg-inline col align-middle">Remove selected</span>
            <span class="d-lg-none oi oi-minus col align-middle"></span>
          </button>
        </div>
      </HeaderTemplate>
      <BodyTemplate>
        <div class="btn-group d-flex flex-nowrap row-cols-2">
          @{
            var availablePlaylists = Playlists.Where(p => !p.Songs.Any(s => context.IsSameAs(s))).ToList();

            <div class="btn-group">
              <button class="btn btn-outline-success dropdown-toggle col-1" disabled="@(!availablePlaylists.Any())" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="d-none d-lg-inline align-middle">Add to</span>
                <span class="d-lg-none oi oi-plus align-middle"></span>
              </button>
              <ul class="dropdown-menu">
                @foreach (var playlist in availablePlaylists)
                {
                  <li><a class="dropdown-item" @onclick="() => AddToPlaylist(playlist, context)">@playlist.Name</a></li>
                }
              </ul>
            </div>
          }
          <button type="button" class="btn btn-outline-danger col-1" disabled="@(SelectedPlaylist is null)" @onclick="() => RemoveFromPlaylist(context)">
            <span class="d-none d-lg-inline col align-middle">Remove</span>
            <span class="d-lg-none oi oi-minus col align-middle"></span>
          </button>
        </div>
      </BodyTemplate>
    </TemplateColumn>
</DataGrid>

@code {
  List<CompleteSong> Songs { get; set; } = new();

  HashSet<CompleteSong> SelectedSongs { get; } = new();
  bool _allSelected;

  string NewName { get; set; } = string.Empty;

  long? _selectedPlaylistId;

  long? SelectedPlaylistId
  {
    get => _selectedPlaylistId;
    set
    {
      _selectedPlaylistId = value;
      SelectedSongs.Clear();
      RefreshSongs();
    }
  }

  PlaylistModel? SelectedPlaylist => SelectedPlaylistId is null or < 0 ? null : Playlists.SingleOrDefault(x => x.Id == SelectedPlaylistId);

  bool AllSelected
  {
    get => _allSelected;
    set
    {
      _allSelected = value;
      
      SelectedSongs.Clear();

      if (!value) return;
      
      foreach (var song in Songs)
      {
        SelectedSongs.Add(song);
      }
    }
  }

  private List<PlaylistModel> Playlists { get; set; } = new List<PlaylistModel>();

  protected override async Task OnInitializedAsync()
  {
    Songs = AllSongs;
    await RefreshPlaylists();
  }

  private async Task RefreshPlaylists()
  {
    Playlists = await Repository.GetPlaylistsAsync();
    RefreshSongs();
  }

  private void RefreshSongs()
  {
    Songs = SelectedPlaylist?.Songs.Select(x => AllSongs.FirstOrDefault(y => y.IsSameAs(x))).OfType<CompleteSong>().ToList() ?? AllSongs;
  }

  async Task AddToPlaylist(PlaylistModel playlist, CompleteSong song)
  {
    await Repository.AddSongToPlaylistAsync(playlist, song);
    await RefreshPlaylists();
  }

  async Task AddPlaylist()
  {
    await  Repository.CreatePlaylistAsync(NewName);
    NewName = string.Empty;
    await RefreshPlaylists();
  }

  private async void RemoveFromPlaylist(CompleteSong song)
  {
    if (SelectedPlaylist is null)
      return;

    await Repository.RemoveSongFromPlaylistAsync(SelectedPlaylist, song);
    await RefreshPlaylists();
  }

  private async Task RemovePlaylist()
  {
    if (SelectedPlaylist is null)
      return;
    
    await Repository.RemovePlaylist(SelectedPlaylist);
    SelectedPlaylistId = -1;
    await RefreshPlaylists();
  }

  private async Task DownloadPlaylist()
  {
    if (SelectedPlaylist is null)
      return;
    
    var dataBuilder = new StringBuilder();
    dataBuilder.AppendLine($"#Name: {SelectedPlaylist.Name}");
    dataBuilder.AppendLine($"#Songs:");
    foreach (var song in SelectedPlaylist.Songs)
    {
      dataBuilder.AppendLine($"{song.Artist} : {song.Title}");
    }
    
    var fileStream = new MemoryStream(Encoding.UTF8.GetBytes(dataBuilder.ToString()));

    var fileName = $"{SelectedPlaylist.Name}.upl";

    using var streamRef = new DotNetStreamReference(stream: fileStream);

    await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
  }


  private async Task AddAllSelected(PlaylistModel playlist)
  {
    await Repository.AddSongsToPlaylistAsync(playlist, SelectedSongs);
    await RefreshPlaylists();
  }

  private async Task RemoveAllSelected()
  {
    if (SelectedPlaylist is null)
      return;
    
    await Repository.RemoveSongsFromPlaylistAsync(SelectedPlaylist, SelectedSongs);
    await RefreshPlaylists();
  }
}
