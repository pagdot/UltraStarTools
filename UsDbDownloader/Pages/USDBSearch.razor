@page "/search"
@using UsDbDownloader.Data
@inject UsDbService UsDbService

<PageTitle>USDB Search</PageTitle>

<DataGrid Items="Results">
    <DataColumn Title="Artist" Field="@(x => x.Artist)" IsSortable="true" IsDefaultSort="true" IsFilterable="true" Width="33%"/>
    <DataColumn Title="Title" Field="@(x => x.Title)" IsSortable="true" IsFilterable="true" Width="33%"/>
    <TemplateColumn>
        <BodyTemplate>
            @if (context.Details != null)
            {
                @if (!string.IsNullOrEmpty(context.Details.YoutubeId))
                {
                    <a class="mdi mdi-youtube me-1" href="@($"https://www.youtube.com/watch?v={context.Details.YoutubeId}")" target="_blank"></a>
                    <a class="mdi mdi-download text-success" href="#" @onclick="() => UsDbService.DownloadSong(context)" @onclick:preventDefault></a>
                }
                else
                {
                    <a class="mdi mdi-download-off text-warning"></a>
                }
            }
            else
            {
                <a class="mdi mdi-reload text-info" href="#" @onclick="async () => { await UsDbService.GetDetails(context); await InvokeAsync(StateHasChanged);}" @onclick:preventDefault></a>
            }
        </BodyTemplate>
    </TemplateColumn>
</DataGrid>

@code {
    private IEnumerable<UsDbSong> Results { get; set; } = new List<UsDbSong>();

    protected override void OnInitialized()
    {
        Results = UsDbService.Songs;
    }
}
